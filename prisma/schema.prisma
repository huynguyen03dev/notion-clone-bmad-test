// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums
enum TaskPriority {
  LOW
  MEDIUM
  HIGH
}

enum CollaboratorRole {
  VIEWER
  EDITOR
  ADMIN
}

// Core models with optimized relationships and indexes
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  avatar    String?
  password  String?  // Optional for OAuth users
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  ownedBoards    Board[]             @relation("BoardOwner")
  collaborations BoardCollaborator[]
  assignedTasks  Task[]              @relation("TaskAssignee")
  accounts       Account[]
  sessions       Session[]

  @@map("users")
}

model Board {
  id          String   @id @default(cuid())
  name        String   @db.VarChar(100)
  description String?  @db.Text
  ownerId     String
  isPublic    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  owner         User                @relation("BoardOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  columns       Column[]
  tasks         Task[]
  collaborators BoardCollaborator[]

  // Performance indexes
  @@index([ownerId])
  @@index([updatedAt])
  @@index([isPublic])
  @@map("boards")
}

model Column {
  id        String   @id @default(cuid())
  name      String   @db.VarChar(100)
  boardId   String
  position  Int
  color     String?  @db.VarChar(7)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  board Board @relation(fields: [boardId], references: [id], onDelete: Cascade)
  tasks Task[]

  // Composite indexes for performance
  @@unique([boardId, position])
  @@index([boardId])
  @@map("columns")
}

model Task {
  id          String       @id @default(cuid())
  title       String       @db.VarChar(200)
  description String?      @db.Text
  columnId    String
  boardId     String       // Denormalized for efficient queries
  assigneeId  String?
  priority    TaskPriority @default(MEDIUM)
  dueDate     DateTime?
  position    Int
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  // Relations with cascade behavior
  column   Column @relation(fields: [columnId], references: [id], onDelete: Cascade)
  board    Board  @relation(fields: [boardId], references: [id], onDelete: Cascade)
  assignee User?  @relation("TaskAssignee", fields: [assigneeId], references: [id], onDelete: SetNull)

  // Composite indexes for performance
  @@unique([columnId, position])
  @@index([boardId])
  @@index([assigneeId])
  @@index([dueDate])
  @@index([priority])
  @@map("tasks")
}

model BoardCollaborator {
  id       String          @id @default(cuid())
  boardId  String
  userId   String
  role     CollaboratorRole
  invitedAt DateTime       @default(now())
  joinedAt DateTime?

  // Relations
  board Board @relation(fields: [boardId], references: [id], onDelete: Cascade)
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Unique constraint to prevent duplicate collaborations
  @@unique([boardId, userId])
  @@index([userId])
  @@map("board_collaborators")
}

// NextAuth.js required models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}
